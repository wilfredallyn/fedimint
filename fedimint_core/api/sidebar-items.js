window.SIDEBAR_ITEMS = {"constant":[["BECH32_HRP","We can represent client connect info as a bech32 string for compactness and error-checking"]],"enum":[["MemberError","An API request error when calling a single federation member"],["OutputOutcomeError",""]],"fn":[["map_tx_outcome_outpoint",""],["url_to_string_with_default_port","`jsonrpsee` converts the `Url` to a `&str` internally and then parses it as an `Uri`. Unfortunately `Url` swallows ports that it considers default ports (e.g. 80 and 443 for HTTP(S)) which makes the `Uri` parsing fail in these cases. This function works around this limitation in a limited way (not fully standard compliant, but work for our use case)."]],"struct":[["DynFederationApi",""],["FederationError","An API request error when calling an entire federation"],["FederationMember",""],["PeerResponse",""],["WsAuthenticatedApi","For a guardian to communicate with their server"],["WsClientConnectInfo","Information required for client to construct [`WsFederationApi`] instance"],["WsFederationApi","Mint API client that will try to run queries against all `members` expecting equal results from at least `min_eq_results` of them. Members that return differing results are returned as a member faults list."]],"trait":[["DynTryIntoOutcome",""],["FederationApiExt","An extension trait allowing to making federation-wide API call on top [`IFederationApi`]."],["GlobalFederationApi",""],["IFederationApi",""],["JsonRpcClient",""]],"type":[["FederationResult",""],["JsonRpcResult",""],["MemberResult",""],["OutputOutcomeResult",""]]};