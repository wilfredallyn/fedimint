window.SIDEBAR_ITEMS = {"constant":[["META_FEDERATION_NAME_KEY","Key under which the federation name can be sent to client in the `meta` part of the config"]],"enum":[["DkgError","Captures an error occurring in DKG"],["DkgMessage",""],["DkgPeerMsg","Things that a `distributed_gen` config can send between peers"],["SupportedDkgMessage","`enum` version of [`SupportedDkgMessage`]"]],"fn":[["load_from_file",""]],"mod":[["serde_binary_human_readable",""],["serde_commit","Handling the Group serialization with a wrapper"]],"struct":[["ApiEndpoint",""],["ClientConfig","Total client config"],["ClientModuleConfig","Config for the client-side of a particular Federation module"],["ConfigGenParams","Module generation (so passed to dkg, not to the module itself) config parameters"],["ConfigResponse","The API response for configuration requests"],["FederationId","The federation id is a copy of the authentication threshold public key of the federation"],["JsonWithKind","[`serde_json::Value`] that must contain `kind: String` field"],["LegacyInitOrderIter","Iterate over module generators in a legacy, hardcoded order: ln, mint, wallet, rest… Returning each `kind` exactly once, so that `LEGACY_HARDCODED_` constants correspond to correct module kind."],["ModuleConfigResponse","Response from the API for this particular module"],["ModuleGenRegistry",""],["ServerModuleConfig","Config for the server-side of a particular Federation module"]],"trait":[["DkgGroup","Defines a group (e.g. G1 or G2) that we can generate keys for"],["ISupportedDkgMessage","Supported (by Fedimint’s code) `DkgMessage<T>` types"],["ModuleGenParams",""],["SGroup",""],["TypedClientModuleConfig","Typed client side module config"],["TypedServerModuleConfig","Module (server side) config"],["TypedServerModuleConsensusConfig","Consensus-critical part of a server side module config"]],"type":[["CommonModuleGenRegistry",""],["DkgResult","Result of running DKG"],["ServerModuleGenParamsRegistry","Configs for each module’s DKG"],["ServerModuleGenRegistry",""]]};