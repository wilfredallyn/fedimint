window.SIDEBAR_ITEMS = {"enum":[["Decision","This enum specifies whether an [OrderedItem] has been accepted or discarded by Fedimint Consensus."],["Message","The majority of these messages need to be delivered to the intended [Recipient] in order for the broadcast to make progress. However, the broadcast does not assume a reliable network layer and implements all necessary retry logic. Therefore, the caller can discard a message immediately if its intended recipient is offline."],["Recipient","This enum defines the intended destination of a [Message]."]],"fn":[["consensus_hash_sha256",""]],"mod":[["broadcast",""],["conversion",""],["data_provider",""],["db",""],["finalization_handler",""],["keychain",""],["network",""],["session",""],["spawner",""]],"struct":[["AtomicBroadcast","The atomic broadcast instance run once by every peer."],["Block","All items ordered in a session that have been accepted by Fedimint Consensus are recorded in the corresponding block. A running Federation produces a [Block] roughly every five minutes.  Therefore, just like in Bitcoin, a [Block] might be empty if no items are ordered in that time or all ordered items are discarded by Fedimint Consensus."],["Keychain","This keychain implements naive threshold schnorr signatures over secp256k1. The broadcasts uses this keychain to sign messages for peers and create the threshold signatures for the signed blocks."],["OrderedItem","If two correct nodes obtain two ordered items from the broadcast they are guaranteed to be in the same order. However, an ordered items is only guaranteed to be seen by all correct nodes if a correct node decides to accept it."],["SignedBlock","A signed block combines a block with the naive threshold secp schnorr signature for its header created by the federation. The signed blocks allow clients and recovering guardians to verify the federations consensus history. After a signed block has been created it is stored in the database."]]};